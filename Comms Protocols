
The server will send 2 types of data:
  Type0:  Server Instructions.
          Instructions pertaining to all nodes.
  Type1:  Screen Update Instructions.
          Info telling node what to display.  Node 'interprets' based on animationFrame
          Each Server Instruction code effectively tells the nodes to use a different library of preset images.
  
Type0: Server Instructions:


  Examples:
  
  1 - Setting matrix size (which tells hardcoded nodes where they sit on the matrix)
  tX0620305 = tX  0   62  03  05


Type1: Screen Animation Update Instructions:
      
      Server instruction codes:
      20... animate by scrolling (used to transfer info on block as it is falling down)
      21... clear pixels from whole row
      22... destroy row (target node plays free form from appropriate library - blocks dissolving when tetris is achieved).
      23... play from appropriate library (blocks at rest at bottom)
      24... play from appropriate library (blocks dissolving when tetris is achieved.
     
     EXAMPLES:
     
     20:
      tX120103000234500
      tX 1 20 1 03 000234500
        tX  = message is from server
        1   = message contains image info
        20  = message contains info for nodes to draw a shape, with animation for scrolling. 
              This effectively points to a specific library on the node (node has several preset libs of images)
        1   = current frame (there are 5 in total)
        03  = message is aimed at row 3
        etc = mask for the row - integers are references to image libs on the node (so: node uses imageLib[20][mask])
     
     21:
      tX121103
      tX 1 21 1 03
        tX  = message is from server
        1   = message contains image info
        21  = message is telling all nodes in a row to show a blank
        1   = Arb (not relevant for code 21 messages)
        03  = message is aimed at row 3
 
     22:
      tX122009
      tX 1 22 0 09
        tX  = message is from server
        1   = message contains image info
        22  = message is telling all nodes in a row to begin their destruction sequence (which plays out without automatically)
        0   = Arb (not relevant for code 22 messages)
        09  = message is aimed at row 9


NOTES      

    For usual game play each node has 2 states:
    ... OFF (no pixels burning)
    ... ON  (all pixel burning)
    
    So, each frame update the server just needs to tell nodes whether to show a block or nothing
    Given that all that happens on screen is a piece moves, this means each frame update will include
    not more than 5 rows of data.
    
    As the block moves down the screen it scrolls smoothly, so with each new animation frame 1 row of pixels is switched off
    We have to pass in frame number (0 -4) so node knows which block to show:
    
    This type of instruction looks like this:
    
      tX12005100101
      tX  -  1  -  20  -  3  -  05  -  100101
      ServerID - message type - server instruction - animation frame - target row - row mask

    Now, to smoothly scroll downwards we need to advance the block down the matrix 1 line at a time
    to do this the Server Instruction field above encoded FRAME.
    Each node has a buffer of images - each one a block that has shifted down by 1 row relative to the previous one:
    
    F0 =  *****
          *****
          *****
          *****
          *****
          
    F1 =  -----
          *****
          *****
          *****
          *****

    F2 =  -----
          -----
          *****
          *****
          *****

etc
